<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-01-20T14:28:41-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Site Title</title><subtitle>Site description here!</subtitle><author><name>Bob</name></author><entry><title type="html">Why Static Site Generators still make sense</title><link href="http://localhost:4000/blog/2023/01/21/modern-ssg.html" rel="alternate" type="text/html" title="Why Static Site Generators still make sense" /><published>2023-01-21T07:35:33-05:00</published><updated>2023-01-21T07:35:33-05:00</updated><id>http://localhost:4000/blog/2023/01/21/modern-ssg</id><content type="html" xml:base="http://localhost:4000/blog/2023/01/21/modern-ssg.html"><![CDATA[<p>In today’s fast-paced digital landscape, the need for a website that is fast, secure, and easy to maintain is more important than ever. This is where static site generators come in.</p>

<p>A static site generator is a tool that takes content written in a markup language (such as Markdown or HTML) and generates a fully-fledged, static website. Unlike dynamic websites, which are built using a web application framework and rely on a server to generate and serve content, static sites are pre-built and can be served from a simple web server.</p>

<p>Here are some of the main benefits of using a static site generator in modern web development:</p>

<ul>
  <li>
    <p>Speed and performance: Static sites are fast, plain and simple. They don’t rely on server-side logic, which means that the pages load quickly and don’t put a strain on the server. This is especially important for mobile users who may be accessing your site on a slower connection.</p>
  </li>
  <li>
    <p>Security: Since static sites don’t rely on server-side logic, they’re less likely to be vulnerable to attacks such as SQL injection or cross-site scripting. This makes them a more secure option for sensitive information.</p>
  </li>
  <li>
    <p>Cost-effective: Because static sites don’t require a backend, they are much cheaper to host and maintain. This makes them a great option for small businesses and personal projects.</p>
  </li>
  <li>
    <p>Flexibility: With a static site generator, you have full control over the HTML, CSS, and JavaScript of your site. This allows for greater flexibility and customization compared to using a content management system (CMS) such as WordPress.</p>
  </li>
  <li>
    <p>Scalability: Static sites are easily scalable, as they can be served from a content delivery network (CDN) or a cloud storage service such as Amazon S3.</p>
  </li>
</ul>

<p>In conclusion, static site generators make sense in modern web development because they offer speed, security, cost-effectiveness, flexibility, and scalability. With the rise of Jamstack, which is a web development architecture that uses a static site generator as a frontend and various APIs and services as a backend, many companies are turning to static site generators as a suitable solution for their web development needs.</p>]]></content><author><name>Bob</name></author><summary type="html"><![CDATA[In today’s fast-paced digital landscape, the need for a website that is fast, secure, and easy to maintain is more important than ever. This is where static site generators come in.]]></summary></entry><entry><title type="html">Code Block Example</title><link href="http://localhost:4000/blog/2023/01/20/codeblock-example.html" rel="alternate" type="text/html" title="Code Block Example" /><published>2023-01-20T07:35:33-05:00</published><updated>2023-01-20T07:35:33-05:00</updated><id>http://localhost:4000/blog/2023/01/20/codeblock-example</id><content type="html" xml:base="http://localhost:4000/blog/2023/01/20/codeblock-example.html"><![CDATA[<p>Add the <code class="language-plaintext highlighter-rouge">number</code> property of <code class="language-plaintext highlighter-rouge">array1</code> and <code class="language-plaintext highlighter-rouge">array2</code> where the <code class="language-plaintext highlighter-rouge">id</code> matches and declare as <code class="language-plaintext highlighter-rouge">array3</code> in javascript.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">array1</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">number</span><span class="p">:</span> <span class="mi">3</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="na">number</span><span class="p">:</span> <span class="mi">4</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">number</span><span class="p">:</span> <span class="mi">4</span> <span class="p">},</span>
<span class="p">];</span>
<span class="kd">let</span> <span class="nx">array2</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">number</span><span class="p">:</span> <span class="mi">3</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">number</span><span class="p">:</span> <span class="mi">5</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="na">number</span><span class="p">:</span> <span class="mi">3</span> <span class="p">},</span>
<span class="p">];</span>
<span class="kd">let</span> <span class="nx">array3</span> <span class="o">=</span> <span class="p">[];</span>

<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">array2</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">array1</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">array2</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">array1</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">array3</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
        <span class="na">id</span><span class="p">:</span> <span class="nx">array2</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">id</span><span class="p">,</span>
        <span class="na">number</span><span class="p">:</span> <span class="nx">array1</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">number</span> <span class="o">+</span> <span class="nx">array2</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">number</span><span class="p">,</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array3</span><span class="p">);</span>
</code></pre></div></div>]]></content><author><name>Bob</name></author><summary type="html"><![CDATA[Add the number property of array1 and array2 where the id matches and declare as array3 in javascript.]]></summary></entry><entry><title type="html">Welcome To Jekyll</title><link href="http://localhost:4000/blog/2023/01/19/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome To Jekyll" /><published>2023-01-19T00:00:00-05:00</published><updated>2023-01-19T00:00:00-05:00</updated><id>http://localhost:4000/blog/2023/01/19/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/blog/2023/01/19/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>To add new posts, simply add a file in the <code class="language-plaintext highlighter-rouge">_posts</code> directory that follows the convention <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-name-of-post.ext</code> and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
<span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span>
</code></pre></div></div>

<p>Check out the <a href="http://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>Bob</name></author><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>